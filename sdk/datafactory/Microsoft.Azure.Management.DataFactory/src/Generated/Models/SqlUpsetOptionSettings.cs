// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataFactory.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Sql upsert option settings
    /// </summary>
    public partial class SqlUpsetOptionSettings
    {
        /// <summary>
        /// Initializes a new instance of the SqlUpsetOptionSettings class.
        /// </summary>
        public SqlUpsetOptionSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlUpsetOptionSettings class.
        /// </summary>
        /// <param name="useTempDB">Specifies whether to use temp db for upsert
        /// interim table. Type: boolean (or Expression with resultType
        /// boolean).</param>
        /// <param name="interimSchemaName">Schema name for interim table.
        /// Type: string (or Expression with resultType string).</param>
        /// <param name="keys">Key column names for unique row
        /// identification</param>
        public SqlUpsetOptionSettings(object useTempDB = default(object), object interimSchemaName = default(object), IList<object> keys = default(IList<object>))
        {
            UseTempDB = useTempDB;
            InterimSchemaName = interimSchemaName;
            Keys = keys;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies whether to use temp db for upsert interim
        /// table. Type: boolean (or Expression with resultType boolean).
        /// </summary>
        [JsonProperty(PropertyName = "useTempDB")]
        public object UseTempDB { get; set; }

        /// <summary>
        /// Gets or sets schema name for interim table. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "interimSchemaName")]
        public object InterimSchemaName { get; set; }

        /// <summary>
        /// Gets or sets key column names for unique row identification
        /// </summary>
        [JsonProperty(PropertyName = "keys")]
        public IList<object> Keys { get; set; }

    }
}
